---
import "../styles/main.scss"
import Question from "../styles/Question.module.scss";
import ShuttleArrowIcon from "./ShuttleArrowIcon.astro";
const { question } = Astro.props;
---

<faq-question>
    <div class={Question.header}>
        <p>{question}</p>
        <button class="question-button">
            <div>
                <ShuttleArrowIcon/>
            </div>
        </button>
    </div>

    <div aria-hidden="true" class="faq-answer">
        <slot/>
    </div>
</faq-question>
<script>
    class Question extends HTMLElement {
        static count = 0
        answerShown = false

        constructor() {
            super()
        }
        connectedCallback() {
            Question.count += 1

            const btn =  this.querySelector(".question-button")
            let q_id = `faq-answer${Question.count}`
            btn["aria-controls"] = q_id
            btn.ariaExpanded = "false"

            const answ =  this.querySelector(".faq-answer")
            answ.id = q_id

            const handleClick = e => {
                this.answerShown = !this.answerShown
                const answ =  this.querySelector(".faq-answer")
                const btn =  this.querySelector(".question-button")

                if(this.answerShown) {
                    answ.classList.add("shown")
                    answ.ariaHidden = "false"

                    btn.ariaExpanded = "true"

                    this.querySelector("svg").classList.add("rotate180")
                } else {
                    answ.classList.remove("shown")
                    answ.ariaHidden = "true"

                    btn.ariaExpanded = "false"

                    this.querySelector("svg").classList.remove("rotate180")
                }
            }
            this.querySelector("button").addEventListener("click", handleClick)
        }
    }
    // Tell the browser to use our AstroHeart class for <astro-heart> elements.
    customElements.define("faq-question", Question);
</script>